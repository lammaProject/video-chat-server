basePath: /
definitions:
  routes.AcceptedFriendRequest:
    properties:
      friend_id:
        type: string
    type: object
  routes.CreateChatRequest:
    properties:
      friend_id:
        type: string
      name:
        type: string
      type_chat:
        $ref: '#/definitions/routes.TypeChat'
    type: object
  routes.CreateChatResponse:
    properties:
      chat_id:
        type: string
      created:
        type: boolean
      message:
        type: string
    type: object
  routes.FriendRequest:
    properties:
      friend_id:
        type: string
      user_id:
        type: string
    type: object
  routes.FriendStatus:
    enum:
    - pending
    - accepted
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusAccepted
  routes.LoginRequest:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  routes.RegisterRequest:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  routes.Room:
    properties:
      created_by:
        type: string
      id:
        description: Комната
        type: string
      name:
        type: string
    type: object
  routes.TypeChat:
    enum:
    - private
    - group
    type: string
    x-enum-varnames:
    - TypeChatPrivate
    - TypeChatGroup
  routes.User:
    properties:
      id:
        description: Пользователь
        type: string
      is_friend:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/chats:
    post:
      consumes:
      - application/json
      description: Создает новый чат (приватный или групповой) или присоединяет пользователя
        к существующему приватному чату
      parameters:
      - description: Данные для создания чата
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/routes.CreateChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Чат успешно создан или пользователь присоединен к существующему
          schema:
            $ref: '#/definitions/routes.CreateChatResponse'
      security:
      - BearerAuth: []
      summary: Создание чата
      tags:
      - chats
  /auth/friends:
    get:
      consumes:
      - application/json
      parameters:
      - description: Статус
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Получение друзей
      tags:
      - friends
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/routes.FriendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.FriendStatus'
      security:
      - BearerAuth: []
      summary: Создание друга
      tags:
      - friends
  /auth/friends/accepted:
    post:
      consumes:
      - application/json
      parameters:
      - description: Принять друга
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/routes.AcceptedFriendRequest'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Принять друга
      tags:
      - friends
  /auth/profile:
    get:
      description: берется из токена
      responses: {}
      security:
      - BearerAuth: []
      summary: Получить имя, id пользователя
      tags:
      - profile
  /auth/rooms:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.Room'
            type: array
      security:
      - BearerAuth: []
      summary: Получить все комнаты
      tags:
      - rooms
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.Room'
            type: array
      security:
      - BearerAuth: []
      summary: Создать комнату
      tags:
      - rooms
  /users:
    get:
      consumes:
      - application/json
      description: Получить список всех пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить всех пользователей
      tags:
      - users
  /users/{name}:
    get:
      consumes:
      - application/json
      description: Получить данные конкретного пользователя
      parameters:
      - description: Имя пользователя
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Получить пользователя по имени
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/routes.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Аутентификация
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Зарегистрировать нового пользователя
      parameters:
      - description: Данные
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/routes.RegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: Регистрация пользователя
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Введите ваш токен
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
